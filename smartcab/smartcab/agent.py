import random
import math
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator

global decay_rate 
decay_rate = 0.01

class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """ 

    def __init__(self, env, learning=False, epsilon=1.0, alpha=0.5):
        super(LearningAgent, self).__init__(env)     # Set the agent in the evironment 
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions

        # Set parameters of the learning agent
        self.learning = learning # Whether the agent is expected to learn
        self.Q = dict()          # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon   # Random exploration factor
        self.alpha = alpha       # Learning factor

        ###########
        ## TO DO ##
        ###########
        # Set any additional class parameters as needed
        self.t = 0

    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)
        
        ########### 
        ## TO DO ##
        ###########
        # Update epsilon using a decay function of your choice
        # Update additional class parameters as needed
        # If 'testing' is True, set epsilon and alpha to 0
        
        if testing:
            self.epsilon = 0
            self.alpha = 0
        else:
            # decay epsilon
            self.t += 1
            #self.epsilon = 1/(self.t**2)
            self.epsilon = math.exp(-0.015*self.t)
            #self.epsilon = 0.985**self.t
            #self.epsilon = 1 - decay_rate * self.t
            #self.epsilon -= 0.05
            
        return None

    def build_state(self):
        """ The build_state function is called when the agent requests data from the 
            environment. The next waypoint, the intersection inputs, and the deadline 
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint 
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        deadline = self.env.get_deadline(self)  # Remaining deadline

        ########### 
        ## TO DO ##
        ###########
        
        # NOTE : you are not allowed to engineer eatures outside of the inputs available.
        # Because the aim of this project is to teach Reinforcement Learning, we have placed 
        # constraints in order for you to learn how to adjust epsilon and alpha, and thus learn about the balance between exploration and exploitation.
        # With the hand-engineered features, this learning process gets entirely negated.
        
        # Set 'state' as a tuple of relevant data for the agent
        #if inputs['light'] == 'red':
        #    state = (inputs['light'], waypoint, inputs['left'] != 'forward')
        #else:
        #    state = (inputs['light'], waypoint, inputs['oncoming'] == 'left')
        
        # red, do nothing - unless waypoint is right AND left is None
        # red, waypoint_is_right_and_left_is_none
        # red, waypoint_is_right, left_is_none
        
        # red, right, left_is_none == right
        
        # red, !right, any() == none
        
        # green, waypoint fwd, any() == GOOD 
        # green, fwd, any() == fwd (I have right of way)
        
        # green, waypoint right, oncoming left == BAD
        # green, right, !left == right (yield to oncoming)
        
        # green, waypoint left, oncoming left == GOOD
        # green, left, left == left (yield to oncoming)
        
        # red/green; left, right, forward; true/false
        # 2, 3, 2
        
        state = (inputs['light'], waypoint, inputs['oncoming'], inputs['left'])
        return state


    def get_maxQ(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """

        ########### 
        ## TO DO ##
        ###########
        # Calculate the maximum Q-value of all actions for a given state
        
        maxQ = max(self.Q[state].values())
        maxQ_index = self.Q[self.state].values().index(maxQ)
        
        ties = [i for i,x in enumerate(self.Q[state].values()) if x == maxQ]
        
        if ties:
            maxQ_index = random.choice(ties)
        
        return maxQ_index 


    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """

        ########### 
        ## TO DO ##
        ###########
        # When learning, check if the 'state' is not in the Q-table
        # If it is not, create a new dictionary for that state
        #   Then, for each action available, set the initial Q-value to 0.0
        
        if state not in self.Q:
            self.Q[state] = dict(zip(self.valid_actions, [0.0 for x in range(0,len(self.valid_actions))]))
        
        return


    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()
        action = None

        ########### 
        ## TO DO ##
        ###########
        # When not learning, choose a random action
        # When learning, choose a random action with 'epsilon' probability
        # Otherwise, choose an action with the highest Q-value for the current state
        # Be sure that when choosing an action with highest Q-value that you randomly select between actions that "tie".
        if not self.learning:
            action = random.choice(self.valid_actions)
        else:
            if self.epsilon > random.random():
                action = random.choice(self.valid_actions)
            else:
                maxQ = self.get_maxQ(self.state)
                action = self.Q[self.state].keys()[maxQ]
            
        return action


    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives a reward. This function does not consider future rewards 
            when conducting learning. """

        ########### 
        ## TO DO ##
        ###########
        # When learning, implement the value iteration update rule
        #   Use only the learning rate 'alpha' (do not use the discount factor 'gamma')
        if self.learning:
            self.Q[self.state][action] = (1-self.alpha) * self.Q[self.state][action] + self.alpha * (reward)
        return


    def update(self):
        """ The update function is called when a time step is completed in the 
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()          # Get current state
        self.createQ(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward
        self.learn(state, action, reward)   # Q-learn

        return
        

def run(args):
    """ Driving function for running the simulation. 
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    # defaults
    alpha = 0.5
    epsilon = 1
    tests = 10
    global decay_rate
    decay_rate = 0.01
    
    if len(args) > 1:
        print("setting params")
        alpha = float(args[1])
        epsilon = float(args[2])
        tests = float(args[3])
        decay_rate = float(args[4])
        print((alpha, epsilon, tests, decay_rate))
        #sys.exit()
        
    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment()
    
    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    agent = env.create_agent(LearningAgent, learning=True, alpha=alpha, epsilon=epsilon)
    
    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent, enforce_deadline=True)
    #env.set_primary_agent(agent)

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    sim = Simulator(env, update_delay=0.01, log_metrics=True, display=False, optimized=True)
    #sim = Simulator(env)
    
    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05 
    #   n_test     - discrete number of testing trials to perform, default is 0
    sim.run(n_test=tests)


if __name__ == '__main__':
    import sys
    run(sys.argv)
